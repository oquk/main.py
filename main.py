import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "7497722074:AAEfnNFa4dGbyqm5Iibnyia7aK4rE9kzrCo"

def generate_order_number() -> str:
    return ''.join([str(random.randint(0, 9)) for _ in range(10)])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user if update.message else update.callback_query.from_user
    username = f"@{user.username}" if user.username else "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–∞–º–∏ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n\n"
        "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: @yandexsplit24\n"
        "–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: @yandexsplitreviews\n\n"
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –±–æ—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫."
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", callback_data='assortment')],
        [InlineKeyboardButton("–¶–µ–Ω—ã", callback_data='prices')],
        [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", callback_data='buy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(message, reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'profile':
        message = "–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n1."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    elif query.data == 'assortment':
        message = (
            "1Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 100.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 10–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 12 —à—Ç—É–∫.\n\n"
            "2Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 75.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 8–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 7 —à—Ç—É–∫.\n\n"
            "3Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 50.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 6–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 18 —à—Ç—É–∫.\n\n"
            "4Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 35.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 4–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 32 —à—Ç—É–∫–∏.\n\n"
        )
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    elif query.data == 'prices':
        message = (
            "–õ–∏–º–∏—Ç 100.000 ‚Äî 10–∫ —Ä—É–±.\n"
            "–õ–∏–º–∏—Ç 75.000 ‚Äî 8–∫ —Ä—É–±.\n"
            "–õ–∏–º–∏—Ç 50.000 ‚Äî 6–∫ —Ä—É–±.\n"
            "–õ–∏–º–∏—Ç 35.000 ‚Äî 4–∫ —Ä—É–±."
        )
        keyboard = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='buy')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'buy':
        message = (
            "1Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 100.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 10–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 12 —à—Ç—É–∫.\n\n"
            "2Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 75.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 8–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 7 —à—Ç—É–∫.\n\n"
            "3Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 50.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 6–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 18 —à—Ç—É–∫.\n\n"
            "4Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç.\n–õ–∏–º–∏—Ç: 35.000. –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–¶–µ–Ω–∞: 4–∫ —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏ 32 —à—Ç—É–∫–∏.\n\n"
        )
        keyboard = [
            [InlineKeyboardButton("1", callback_data='select_1')],
            [InlineKeyboardButton("2", callback_data='select_2')],
            [InlineKeyboardButton("3", callback_data='select_3')],
            [InlineKeyboardButton("4", callback_data='select_4')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data in ['select_1', 'select_2', 'select_3', 'select_4']:
        message = (
            "‚ù§Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –í–∞–º–∏ —Ç–æ–≤–∞—Ä–∞, –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
            "1Ô∏è‚É£ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n\n"
            "2Ô∏è‚É£ –ö—Ä–∏–ø—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º —Å–ø–æ—Å–æ–±."
        )
        keyboard = [
            [InlineKeyboardButton("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", callback_data='bank_transfer')],
            [InlineKeyboardButton("–ö—Ä–∏–ø—Ç–∞", callback_data='crypto')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'bank_transfer':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ÆMoney.\n\n"
            "1Ô∏è‚É£ –Æmoney\n"
            "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:\n"
            "4100118744115724\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –Æmoney –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: @yandexsplit24"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto':
        message = "‚ù§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        keyboard = [
            [InlineKeyboardButton("BTC", callback_data='crypto_btc')],
            [InlineKeyboardButton("USDT TRC20", callback_data='crypto_usdt_trc20')],
            [InlineKeyboardButton("USDT BEP20", callback_data='crypto_usdt_bep20')],
            [InlineKeyboardButton("SOL", callback_data='crypto_sol')],
            [InlineKeyboardButton("ETH", callback_data='crypto_eth')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto_btc':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ BTC:\n"
            "bc1qtr7hgspczl5ke89h2hdmqzt8wx7gmta2zr36re\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto_usdt_trc20':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ USDT TRC20:\n"
            "TBPU4Lb12GoECBiqhutNTgp7ec1SrQ22nD\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto_usdt_bep20':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ USDT BEP20:\n"
            "0x4FFb2270D0342023B49C71fAB9B135813a4071D0\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto_sol':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ SOLANA:\n"
            "FxmaQDfa87Z1qMN7u6KPvTkxCKWBMtcGhXju2eorr21b\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'crypto_eth':
        message = (
            "‚ù§Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ ETH:\n"
            "0x4FFb2270D0342023B49C71fAB9B135813a4071D0\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    elif query.data == 'confirm':
        order_number = generate_order_number()
        message = (
            "–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞: @yandexsplitsupport_bot\n\n"
            "–í —Å–ª—É—á–∞–µ –Ω–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞, –í—ã –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ.\n"
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ –ø—Ä–∞–≤–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç—ã.\n\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}"
        )
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
        await query.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    elif query.data == 'back':
        await start(update, context)
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))

    application.run_polling()

if __name__ == '__main__':
    main()
